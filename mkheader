#!perl -s
#
# This auxiliary script creates five header files
# used for building XSUB of Unicode::Normalize, and into other c libraries. (safeclib)
#
# Usage:
#    do 'mkheader' in perl, or
#    perl mkheader [-uni] [-ind] [-utf16] [-std] on the command line
#
# Input files:
#    unicore/CombiningClass.pl (or unicode/CombiningClass.pl)
#    unicore/Decomposition.pl (or unicode/Decomposition.pl)
#
# Output files:
#    un[8w16][i]fcan.h
#    un[8w16][i]fcpt.h
#    un[8w16][i]fcmb.h
#    un[8w16][i]fcmp.h
#    un[8w16][i]fexc.h
#
# -ind creates an indirection table of offsets into the tbl 1-4 strings.
# The offset fits into a short. The 3 left-most bits indicating tbl 1-4.
# This saves space for all the 4byte pointers as the tables are very sparse.
# It needs 3x less memory, 174772 => 55520 bytes.
# Even better would be bitset compression, like roaring or EWAH.
#
# -uni and -utf16 are only needed to create tables for other libraries, such
# as safeclib. -uni creates wchar_t UTF-32 tables for sizeof(wchar_t)==4 and
# together with -utf16 creates wchar_t UTF-16 tables for sizeof(wchar_t)==2.
# With -uni the creation of EBCDIC tables is skipped.
#
# With -std stdint (uint16_t, ...) types are used, without perl U8, U16, U32.

use 5.006;
use strict;
use warnings;
no warnings 'redefine';
use Carp;
use File::Spec;
use File::Copy;
use File::Compare;
use SelectSaver;
use Config;
use vars qw($uni $ind $utf16 $std);
#use Unicode::UCD;

my ($cperl_core);

BEGIN {
    unless ('A' eq pack('U', 0x41)) {
	die "Unicode::Normalize cannot stringify a Unicode code point\n";
    }
    unless (0x41 == unpack('U', 'A')) {
	die "Unicode::Normalize cannot get Unicode code point\n";
    }
}

if ($utf16 and !$uni) {
    die "-utf16 requires -uni\n";
}

$cperl_core++ if $ENV{PERL_CORE} and $Config{usecperl};
our $PACKAGE = 'Unicode::Normalize, mkheader';
$Unicode::Normalize::VERSION = '1.25' unless $Unicode::Normalize::VERSION;
our $w8 = $uni ? "W" : "8";
our $prefix = "UN$w8";
$prefix .= $ind ? "IF_" : "F_";
our $fprefix = "un". ($uni ? ($utf16 ? "w16" : "w") : "8") . ($ind ? "i" : "") ."f";
our $structname = "${prefix}complist";

# Starting in v5.20, the tables in lib/unicore are built using the platform's
# native character set for code points 0-255.
*pack_U = ($] ge 5.020)
          ? sub { return pack('W*', @_).pack('U*'); } # The empty pack returns
                                                      # an empty UTF-8 string,
                                                      # so the effect is to
                                                      # force the return into
                                                      # being UTF-8.
          : sub { return pack('U*', @_); };

# %Canon and %Compat will be ($codepoint => $hexstring) after _U_stringify()
our %Comp1st;	# $codepoint => $listname  : may be composed with a next char.
our %CompList;	# $listname,$2nd  => $codepoint : composite

##### The below part is common to mkheader and PP #####

# http://www.unicode.org/reports/tr44/#Canonical_Combining_Class_Values
our %Combin;	# $codepoint => $number    : combining class values
our %Canon;	# $codepoint => \@codepoints : canonical decomp.
our %Compat;	# $codepoint => \@codepoints : compat. decomp.
our %Compos;	# $1st,$2nd  => $codepoint : composite
our %Exclus;	# $codepoint => 1          : composition exclusions
our %Single;	# $codepoint => 1          : singletons
our %NonStD;	# $codepoint => 1          : non-starter decompositions
our %Comp2nd;	# $codepoint => 1          : may be composed with a prev char.

# from core Unicode database
our $Combin = do "unicore/CombiningClass.pl"
    || do "unicode/CombiningClass.pl"
    || croak "$PACKAGE: CombiningClass.pl not found";
our $Decomp = do "unicore/Decomposition.pl"
    || do "unicode/Decomposition.pl"
    || croak "$PACKAGE: Decomposition.pl not found";

# CompositionExclusions.txt since Unicode 3.2.0.  If this ever changes, it
# would be better to get the values from Unicode::UCD rather than hard-code
# them here, as that will protect from having to make fixes for future
# changes. 67 + 14 code points, latest checked: Unicode 10.0
our @CompEx = qw(
    0958 0959 095A 095B 095C 095D 095E 095F 09DC 09DD 09DF 0A33 0A36
    0A59 0A5A 0A5B 0A5E 0B5C 0B5D 0F43 0F4D 0F52 0F57 0F5C 0F69 0F76
    0F78 0F93 0F9D 0FA2 0FA7 0FAC 0FB9 FB1D FB1F FB2A FB2B FB2C FB2D
    FB2E FB2F FB30 FB31 FB32 FB33 FB34 FB35 FB36 FB38 FB39 FB3A FB3B
    FB3C FB3E FB40 FB41 FB43 FB44 FB46 FB47 FB48 FB49 FB4A FB4B FB4C
    FB4D FB4E 2ADC 1D15E 1D15F 1D160 1D161 1D162 1D163 1D164 1D1BB
    1D1BC 1D1BD 1D1BE 1D1BF 1D1C0
);

# definition of Hangul constants
use constant SBase  => 0xAC00;
use constant SFinal => 0xD7A3; # SBase -1 + SCount
use constant SCount =>  11172; # LCount * NCount
use constant NCount =>    588; # VCount * TCount
use constant LBase  => 0x1100;
use constant LFinal => 0x1112;
use constant LCount =>     19;
use constant VBase  => 0x1161;
use constant VFinal => 0x1175;
use constant VCount =>     21;
use constant TBase  => 0x11A7;
use constant TFinal => 0x11C2;
use constant TCount =>     28;

sub is_miniperl {
    return !defined &DynaLoader::boot_DynaLoader;
}

sub decomposeHangul {
    my $sindex = $_[0] - SBase;
    my $lindex = int( $sindex / NCount);
    my $vindex = int(($sindex % NCount) / TCount);
    my $tindex =      $sindex % TCount;
    my @ret = (
       LBase + $lindex,
       VBase + $vindex,
      $tindex ? (TBase + $tindex) : (),
    );
    return wantarray ? @ret :
      $uni ? pack("W*",@ret)
           : pack_U(@ret);
}

########## getting full decomposition ##########

## converts string "hhhh hhhh hhhh" to a numeric list
## (hex digits separated by spaces)
sub _getHexArray { map hex, $_[0] =~ /\G *([0-9A-Fa-f]+)/g }

while ($Combin =~ /(.+)/g) {
    my @tab = split /\t/, $1;
    my $ini = hex $tab[0];
    if ($tab[1] eq '') {
	$Combin{$ini} = $tab[2];
    } else {
	$Combin{$_} = $tab[2] foreach $ini .. hex($tab[1]);
    }
}

while ($Decomp =~ /(.+)/g) {
    my @tab = split /\t/, $1;
    my $compat = $tab[2] =~ s/<[^>]+>//;
    my $dec = [ _getHexArray($tab[2]) ]; # decomposition
    my $ini = hex($tab[0]); # initial decomposable character
    my $end = $tab[1] eq '' ? $ini : hex($tab[1]);
    # ($ini .. $end) is the range of decomposable characters.

    foreach my $u ($ini .. $end) {
	$Compat{$u} = $dec;
	$Canon{$u} = $dec if ! $compat;
    }
}

for my $s (@CompEx) {
    my $u = hex $s;
    next if !$Canon{$u}; # not assigned
    next if $u == 0xFB1D && !$Canon{0x1D15E}; # 3.0.1 before Corrigendum #2
    $Exclus{$u} = 1;
}

# histogram of the 54 CC values. (max 03f - 6bit)
# we use it only for reordering, so we could benefit from tighter storage.
#my %CombinStats;
#foreach my $u (keys %Combin) {
#    $CombinStats{$Combin{$u}}++;
#}
#print "cc (CombiningClass) table: ", scalar keys %CombinStats, " unique values\n";
#foreach my $cc (sort {$a <=> $b} keys %CombinStats) {
#    print "$cc\t$CombinStats{$cc}\n";
#}

foreach my $u (keys %Canon) {
    my $dec = $Canon{$u};

    if (@$dec == 2) {
	if ($Combin{ $dec->[0] }) {
	    $NonStD{$u} = 1;
	} else {
	    $Compos{ $dec->[0] }{ $dec->[1] } = $u;
	    $Comp2nd{ $dec->[1] } = 1 if ! $Exclus{$u};
	}
    } elsif (@$dec == 1) {
	$Single{$u} = 1;
    } else {
	my $h = sprintf '%04X', $u;
	croak("Weird Canonical Decomposition of U+$h");
    }
}

# modern HANGUL JUNGSEONG and HANGUL JONGSEONG jamo
foreach my $j (0x1161..0x1175, 0x11A8..0x11C2) {
    $Comp2nd{$j} = 1;
}

sub getCanonList {
    my @src = @_;
    my @dec = map {
	(SBase <= $_ && $_ <= SFinal) ? decomposeHangul($_)
	    : $Canon{$_} ? @{ $Canon{$_} } : $_
    } @src;
    return join(" ",@src) eq join(" ",@dec) ? @dec : getCanonList(@dec);
    # condition @src == @dec is not ok.
}

sub getCompatList {
    my @src = @_;
    my @dec = map {
	(SBase <= $_ && $_ <= SFinal) ? decomposeHangul($_)
	    : $Compat{$_} ? @{ $Compat{$_} } : $_
		} @src;
    return join(" ",@src) eq join(" ",@dec) ? @dec : getCompatList(@dec);
    # condition @src == @dec is not ok.
}

# exhaustive decomposition
foreach my $key (keys %Canon) {
    $Canon{$key}  = [ getCanonList($key) ];
}

# exhaustive decomposition
foreach my $key (keys %Compat) {
    $Compat{$key} = [ getCompatList($key) ];
}

##### The above part is common to mkheader and PP #####

foreach my $comp1st (keys %Compos) {
    my $listname = sprintf("${structname}_%06x", $comp1st);
		# %04x is bad since it'd place _3046 after _1d157.
    $Comp1st{$comp1st} = $listname;
    my $rh1st = $Compos{$comp1st};

    foreach my $comp2nd (keys %$rh1st) {
	my $uc = $rh1st->{$comp2nd};
	$CompList{$listname}{$comp2nd} = $uc;
    }
}

sub split_into_char {
    use bytes;
    my $uni = shift;
    my $len = length($uni);
    my @ary;
    for(my $i = 0; $i < $len; ++$i) {
	push @ary, ord(substr($uni,$i,1));
    }
    return @ary;
}
sub split_utf16 (@) {
    my @v;
    for (@_) {
        if ($_ < 0x10000) {
            push @v, $_;
        } else {
            my $cp = $_ - 0x10000;
            my $d1 = 0xd800 + (($cp >> 10) & 0x3ff);
            my $d2 = 0xdc00 + ($cp & 0x3ff);
            push @v, $d1, $d2;
        }
    }
    @v
}

# lengths in units: uni/utf16: wchar_t, utf8: byte
sub _utf8_len {
    scalar split_into_char(pack_U(@_));
}
sub _uni_len {
    scalar @_;
}
sub _utf16_len {
    scalar split_utf16 @_;
}
# UTF-8 char* string literal
sub _utf8_stringify {
    sprintf '"%s"', join '',
	map sprintf("\\x%02x", $_), split_into_char(pack_U(@_));
}
# wchar_t* string literal
sub _uni_stringify {
    sprintf 'L"%s"', join '',
	map sprintf($_ > 34 && $_ < 127 && $_ != 92 ? "%c" : "\\x%04x", $_), @_;
}
# wchar_t UCS-16 string literal
sub _utf16_stringify {
    sprintf 'L"%s"', join ',',
	map sprintf($_ > 39 && $_ < 127 && $_ != 92 ? "%c" : "\\x%04x", $_),
        split_utf16 @_;
}
# array of single wchar_t without \0
sub _uni_ind_stringify {
    sprintf '{%s}', join ',',
	map sprintf($_ > 39 && $_ < 127 && $_ != 92 && $_ != 39
                    ? "L'%c'" : "L'\\x%04x'", $_), @_;
}
# array of wchar_t UCS-16 characters without \0
sub _utf16_ind_stringify {
    sprintf '{%s}', join ',',
	map sprintf($_ > 39 && $_ < 127 && $_ != 92
                    ? "L'%c'" : "L'\\x%04x'", $_),
        split_utf16 @_;
}
# array of char without \0
sub _utf8_ind_stringify {
    sprintf '{%s}', join ',',
	map sprintf($_ > 32 && $_ < 127 && $_ != 92 && $_ != 39
                    ? "'%c'" : "'\\x%02x'", $_), split_into_char(pack_U(@_));
}

########## writing header files ##########

sub upd_core {
    my $file = shift;
    my $corefile = File::Spec->catfile(File::Spec->updir(),
                                       File::Spec->updir(),
                                       $file);
    if (compare($file, $corefile)) {
        copy($file, $corefile);
    }
}

my @boolfunc = (
    {
	name => "Exclusion",
        desc => "Composite exclusions",
	type => "bool",
	hash => \%Exclus,
    },
    {
	name => "Singleton",
        desc => "Singletons",
	type => "bool",
	hash => \%Single,
    },
    {
	name => "NonStDecomp",
        desc => "non-starter decompositions",
	type => "bool",
	hash => \%NonStD,
    },
    {
	name => "Comp2nd",
        desc => "may be composed with a prev char",
	type => "bool",
	hash => \%Comp2nd,
    },
);

my $orig_fh = SelectSaver->new;
{

# with miniperl we cannot get the Unicode::UCD::UnicodeVersion()
my $ucd_version = '9.0.0';
unless (is_miniperl()) {
    require Unicode::UCD;
    $ucd_version = Unicode::UCD::UnicodeVersion();
}

my @h_args = ($Unicode::Normalize::VERSION,
              $uni?" -uni":"", $ind?" -ind":"",
              $ucd_version,
              $utf16 ? 16 : $uni ? 32 : 8);
my $file = $fprefix . "exc.h";
open FH, ">", $file or croak "$PACKAGE: $file can't be made";
binmode FH; select FH;

printf FH << 'EOF', @h_args;
/* ex: set ro ft=c: -*- buffer-read-only: t -*-
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is auto-generated by Unicode-Normalize %s
 * mkheader%s%s
 * for Unicode %s UTF-%d
 * Any changes here will be lost!
 */
EOF

foreach my $tbl (@boolfunc) {
    my @temp = sort {$a <=> $b} keys %{$tbl->{hash}};
    my $type = $tbl->{type};
    my $name = $tbl->{name};
    printf "/* %s */\n", $tbl->{desc};
    if ($std) {
        print "$type is$name (wint_t uv)\n{\n  return\n\t";
    } else {
        print "$type is$name (UV uv)\n{\n  return\n\t";
    }

    while (@temp) {
	my $cur = shift @temp;
	if (@temp && $cur + 1 == $temp[0]) {
	    print "($cur <= uv && uv <= ";
	    while (@temp && $cur + 1 == $temp[0]) {
		$cur = shift @temp;
	    }
	    print "$cur)";
	    print "\n\t|| " if @temp;
	} else {
	    print "uv == $cur";
	    print "\n\t|| " if @temp;
	}
    }
    if ($uni) {
        print "\n\t? 1 : 0;\n}\n\n";
    } else {
        print "\n\t? TRUE : FALSE;\n}\n\n";
    }
}

close FH;
upd_core($file) if $cperl_core;

####################################

my $compinit = "typedef struct { U32 nextchar; U32 composite; } $structname;\n";
# wint_t is signed with mingw32 > -Woverflow. use uint16_t instead
$compinit .= "typedef struct { U16 nextchar; U16 composite; }".
                 " ${structname}_s;\n\n";
$compinit =~ s/ U(\d\d) / uint\$_t /g if $std;
my $complist = "";
my ($maxn, $maxl, $maxr, $nshort) = (0,0,0,0);
my $flong;

foreach my $i (sort keys %CompList) {
    my $n = 1 + scalar keys %{ $CompList{$i} };
    my @v = sort {$a <=> $b } keys %{ $CompList{$i} };
    my $lastv = $v[$#v];
    if ($flong or $lastv > 0xffff or $CompList{$i}{$lastv} > 0xffff) {
        $nshort++;
        unless ($flong) {
            $flong = $i;
            $flong =~ s/^.*_complist_//;
            $flong = "0x".$flong;
        }
        $complist .= "static const $structname $i [$n] = {\n";
    } else {
        $complist .= "static const ${structname}_s $i [$n] = {\n";
    }
    $complist .= join ",\n",
      map sprintf("\t{ 0x%x, 0x%x }", $_, $CompList{$i}{$_}), @v;
    $complist .= ", { 0, 0 }};\n"; # need the sentinel
    # statistics
    $maxn = $n if $n > $maxn;
    $maxl = $lastv if $lastv > $maxl;
    $maxr = $CompList{$i}{$lastv} if $CompList{$i}{$lastv} > $maxr;
}
# how many > short (0xffff)
$compinit .= sprintf("/* max nextchar: %d/0x%x, max composite: %d/0x%x, max length: %d */\n",
                     $maxl, $maxl, $maxr, $maxr, $maxn);
$compinit .= sprintf("/* %d/%d lists > short (0xffff) */\n\n",
                     $nshort, scalar keys  %CompList);
$compinit .= "#define ${prefix}COMPLIST_FIRST_LONG $flong\n\n";
$compinit .= $complist;
# TODO: create the complist rows as bitmap, not array of char

my @tripletable = (
    {
	file => $fprefix . "cmb.h",
	name => "combin",
        desc => "CombiningClass",
	type => $uni ? 'uint8_t' : "STDCHAR",
	hash => \%Combin,
	null =>  0,
    },
    {
	file => $fprefix . "can.h",
	name => "canon",
        desc => "Canonical Decomposition",
	type => $uni ? "wchar_t*" : "char*",
	hash => \%Canon,
	null => "NULL",
    },
    {
	file => $fprefix . "cpt.h",
	name => "compat",
        desc => "Compat. Decomposition",
	type => $uni ? "wchar_t*" : "char*",
	hash => \%Compat,
	null => "NULL",
    },
    {
	file => $fprefix . "cmp.h",
	name => "compos",
        desc => "Composition",
	type => "${structname}_s *",
	hash => \%Comp1st,
	null => "NULL",
	init => $compinit,
    },
);

sub ptrtype {
  my ($type) = @_;
  return ($type =~ /\*$/) ? 1 : 0;
}

sub maxl {
    return undef unless @_;
    my $max = shift;
    for my $e (@_) {
        $max = $e if defined $e and (!defined $max or $e > $max);
    }
    return $max;
}

sub len_list_stringify {
  local $^W; no warnings;
  local $" = ','; # LIST_SEPARATOR
  my @tl = @_;
  shift @tl;
  "(@tl)"
}

# compat -uni: (1664,1190,638,109,16|14,1,1,....1 for 18)
my %compat_exc; # maxlen = 5
my $indtblrx = qr/^(canon|compat)$/;

foreach my $tbl (@tripletable) {
    my $file = $tbl->{file};
    my $name = $tbl->{name};
    my $head = "${prefix}$name";
    my $type = $tbl->{type};
    my $hash = $tbl->{hash};
    my $null = $tbl->{null};
    my $init = $tbl->{init};
    my $doind = $ind && ($name =~ $indtblrx ? 1 : 0);

    open FH, ">", $file or croak "$PACKAGE: $file can't be made";
    binmode FH; select FH;
    my %val;

    printf FH << 'EOF', @h_args;
/* ex: set ro ft=c: -*- buffer-read-only: t -*-
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is auto-generated by Unicode-Normalize %s
 * mkheader%s%s
 * for Unicode %s UTF-%d
 * Any changes here will be lost!
 */
EOF
    printf "/* %s */\n", $tbl->{desc};
    print $init if defined $init;

    my ($indtype, %ival, @ival, @l, $shift, $mask);
    my $stringify = $uni
      ? ($utf16 ? \&_utf16_stringify : \&_uni_stringify)
      : \&_utf8_stringify;
    my $lensub = $uni
      ? ($utf16 ? \&_utf16_len : \&_uni_len)
      : \&_utf8_len;
    if ($name =~ $indtblrx) {
        foreach my $uv (keys %$hash) {
            croak sprintf("a Unicode code point 0x%04X over 0x10FFFF.", $uv)
              unless $uv <= 0x10FFFF;
            my @v = $utf16 ? split_utf16(@{ $hash->{$uv} }) : @{ $hash->{$uv} };
            if ($doind) {
                $stringify = $uni 
                  ? ($utf16 ? \&_utf16_ind_stringify : \&_uni_ind_stringify) 
                  : \&_utf8_ind_stringify;
                # length in wchar/byte
                my $n = $lensub->(@v);
                # skip U+FDFA http://www.unicode.org/reports/tr31/#NFKC_Modifications
                # with length 18 on NFKD (compat).
                if ($n > 5) {
                    $compat_exc{$uv} = $uni ? _uni_stringify( @v ) : _utf8_stringify( @v );
                }
                $ival{$n}{ $stringify->( @v ) } = $uv;
                my @c = unpack 'CCCC', pack 'N', $uv;
                $val{ $c[1] }{ $c[2] }{ $c[3] } = [ @v ];
            }
            else {
                # *stringify = $uni ? \&_uni_stringify : \&_utf8_stringify; 
                my @c = unpack 'CCCC', pack 'N', $uv;
                $val{ $c[1] }{ $c[2] }{ $c[3] } = $stringify->( @v );
            }
            # $hash->{$uv} = stringify( @v );
        }
        if ($doind) {
            $null = '0';
            for my $n (sort keys %ival) { # 1-4 for canon, 1-6 for compat
                my @v = sort keys %{$ival{$n}};
                $ival[$n] = [ @v ]; # the values
                $l[$n] = scalar @v;
            }
            print "\n/* Using now indirect tables with indices into the unique values */\n";
            print "/* even sparing the final \\0 */\n\n";
            # find unique values with 1-4 entries
            my $size = 16;
            $indtype = $std ? 'uint16_t' : 'U16';
            if ($l[1] < 256 && $l[2] < 256 && $l[3] < 256 && $l[4] < 256) {
                $indtype = $std ? 'uint8_t' : 'U8';
                $size = 8;
            } elsif ($l[1] > 0xffff or $l[2] > 0xffff or $l[3] > 0xffff or $l[4] > 0xffff) {
                die "Too many indirect tables: @l";
            }
            printf "#undef NORMALIZE_IND_TBL\n";
            printf "#define NORMALIZE_IND_TBL\n";
            print "/* tbl sizes: ",len_list_stringify(@l)," */\n";
            # canon: (917,762,227,36)
            # compat: (1664,1190,638,109,16|14,1,1) # special-case the last
            my $l = @l-1;
            $shift = (2**($size-1) >> $l-1); # highest bit rsh for all lengths
            $mask = $shift - 1;
            printf "/* l: 1-%d */\n", $l;
            my $max = maxl @l;
            printf "/* max size: %d 0x%x */\n", $max, $max;
            if ($max > $mask) {
                # if this is only U+FDFA sallallahou alayhe wasallam => 18 upper case letters
                # handle it seperately. also the len=7+8 rows.
                $l = 5; # special-case the rest
                $shift = (2**($size-1) >> $l-1); # highest bit rsh for all lengths
                $mask = $shift - 1;
                warn sprintf
                  "Overlarge $name tables for indirect, ".
                  "special-case the last %s max=0x%x, mask=0x%x",
                  len_list_stringify(@l), $max, $mask;
                die "max > mask" if $max > $mask;
                shift @l;
                @l = @l[0..$l];
            }
            printf "#define %s_MAXLEN  %d\n",   $head, $l;
            printf "#define TBL(i)               ((i-1) << %d)\n", 16-$l;
            printf "/* value = (const $type)\&UN%sIF_${name}_tbl[LEN-1][IDX] */\n",
              $w8;
            printf "#define %s_LEN(v)  (((v) >> %d) + 1)\n", $head, 16-$l;
            printf "#define %s_IDX(v)  ((v) & 0x%x)\n", $head, $mask;
            printf "#define %s_PLANE_T %s\n", $head, $indtype;
            printf "\n";
            print "/* the values */\n";
            for my $n (sort keys %ival) { # 1-5
                my $i = 0;
                my @v = @{$ival[$n]}; # the unique values
                my $size = scalar @v;
                $type =~ s/\*$//;
                next if $n > $l;
                printf "static const $type ${head}_tbl_$n [$size][$n] = {";
                for my $v (@v) {
                    printf "\n /* %3d */ ", $i if $i % 8 == 0;
                    print " ",$v;
                    print ','  if $i != $size-1;
                    $i++;
                }
                print "};\n\n";
            }
            if (%compat_exc) {
                my $c = scalar keys %compat_exc;
                print "/* the special-cased overlong entries */\n";
                my $maxcp = maxl(sort {$a <=> $b} keys %compat_exc);
                my $init = $std
                  ? "typedef struct { const wint_t cp; const $type* v; } ${head}_exc_t;\n"
                  : "typedef struct { const U32 cp; const $type* v; } ${head}_exc_t;\n";
                if ($maxcp < 0xffff) {
                    if ($std) {
                        $init =~ s/ wint_t / uint16_t /;
                    } else {
                        $init =~ s/ U32 / U16 /;
                    }
                }
                print $init;
                print "/* sorted for binary search */\n";
                printf "#define ${head}_exc_size %d\n", $c;
                printf "static const ${head}_exc_t ${head}_exc [%d] = {\n", $c;
                my $i = 0;
                for my $cp (sort {$a <=> $b} keys %compat_exc) {
                    printf "\t{ 0x%x, %s }", $cp, $compat_exc{$cp};
                    printf "," if ++$i < $c;
                    printf "\n";
                }
                print "};\n\n";
            } else {
                printf "/* no exception table */\n";
                printf "#define ${head}_exc_size %d\n\n", 0;
            }
            printf "static const $type* ${head}_tbl [$l] = {\n";
            for my $i (1..$l) {
                if (exists $ival{$i}) {
                    print "\t(const $type*) ${head}_tbl_$i";
                }
                else {
                    print "\tNULL";
                }
                print (($i == $l) ? "\n" : ",\n");
            }
            print "};\n\n";
        }
    } else {
        if ($name eq 'compat') {
            $stringify = $uni ? \&_uni_stringify : \&_utf8_stringify;
        } else {
            $stringify = sub { @_ }; # identity (list of ints or a string)
        }
        foreach my $uv (keys %$hash) {
            croak sprintf("a Unicode code point 0x%04X over 0x10FFFF.", $uv)
              unless $uv <= 0x10FFFF;
            my @c = unpack 'CCCC', pack 'N', $uv;
            my $v = $hash->{$uv};
            
            if ($name eq 'compat') {
                my @v = $utf16 ? split_utf16 @$v : @$v;
                $val{ $c[1] }{ $c[2] }{ $c[3] } = $stringify->( @v );
            } else {
                $val{ $c[1] }{ $c[2] }{ $c[3] } = $v;
            }
        }
    }
 
    print "/* the rows */\n";
    # TODO: also combin
    foreach my $p (sort { $a <=> $b } keys %val) {
	next if ! $val{ $p };
	for (my $r = 0; $r < 256; $r++) {
            next if ! $val{ $p }{ $r };
            if ($doind) {
                printf "static const $indtype ${head}_%02x_%02x [256] = {\n", $p, $r;
            } else {
                printf "static const $type ${head}_%02x_%02x [256] = {\n", $p, $r;
            }
	    for (my $c = 0; $c < 256; $c++) {
                my $uv = ($p << 16) + ($r << 8) + $c;
                if ($c % 8 == 0) {
                    if ($p) {
                        printf "/* %02x%02x%02x */ ", $p,$r,$c;
                    } else {
                        printf "/*   %02x%02x */ ", $r,$c;
                    }
                }
                if (defined $val{$p}{$r}{$c}) {
                    if ($doind) {
                        my $i = 0;
                        my @s = @{ $val{$p}{$r}{$c} };
                        my $s = $stringify->( @s );
                        my $n = $lensub->(@s);
                        my @v = @{$ival[$n]}; # the unique values
                        # search for $i, the index into @v
                        for my $v (@v) {
                            if ($v eq $s) {
                                if ($n <= 5) {
                                    $val{$p}{$r}{$c} = sprintf("TBL(%d)|%d", $n, $i);
                                } else {
                                    $val{$p}{$r}{$c} = sprintf("(%s)-1 /*TBL(%d)|%d*/",
                                                               $indtype, $n, $i);
                                }
                            }
                            $i++;
                        }
                        if (ref $val{$p}{$r}{$c} eq 'ARRAY') {
                            die "$p $r $c unresolved: uv=$uv $s @{$val{$p}{$r}{$c}}";
                        }
                    } else {
                        if (ref $val{$p}{$r}{$c} eq 'ARRAY') {
                            die "$file $p $r $c unresolved: uv=$uv @{$val{$p}{$r}{$c}}";
                        }
                    }
                    if ($type =~ /(uint|wchar)/ or $doind) {
                        print " ",$val{$p}{$r}{$c};
                    } elsif ($type =~ /complist/) {
                        my $s = $val{$p}{$r}{$c};
                        my ($c) = $s =~ m/_complist_(......)/;
                        my $i = hex $c;
                        if ($i >= hex $flong) {
                            print " (const ${prefix}complist_s*)", $s;
                        } else {
                            print " ", $s;
                        }
                    } else {
                        print " ($type)".$val{$p}{$r}{$c};
                    }
                } else {
		    print " ",$null;
                }
		print ','  if $c != 255;
		print "\n" if $c % 8 == 7;
	    }
	    print "};\n\n";
	}
    }
    print "/* the planes */\n";
    foreach my $p (sort { $a <=> $b } keys %val) {
	next if ! $val{ $p };
        if ($doind) {
            printf "static const $indtype* ${head}_%02x [256] = {\n", $p;
        } else {
            printf "static const $type* ${head}_%02x [256] = {\n", $p;
        }
	for (my $r = 0; $r < 256; $r++) {
	    print $val{ $p }{ $r }
		? sprintf("${head}_%02x_%02x", $p, $r)
		: "NULL";
	    print ','  if $r != 255;
	    print "\n" if $val{ $p }{ $r } || ($r+1) % 8 == 0;
	}
	print "};\n\n";
    }
    print "/* the main plane */\n";
    if ($doind) {
        printf "#undef TBL\n";
        printf "static const $indtype** ${head} [] = {\n";
    } else {
        print "static const $type** $head [] = {\n";
    }
    for (my $p = 0; $p <= 0x10; $p++) {
	print $val{ $p } ? sprintf("${head}_%02x", $p) : "NULL";
	print ','  if $p != 0x10;
	print "\n";
    }
    print "};\n\n";
    close FH;
    upd_core($file) if $cperl_core and $name ne 'compat';
}

}   # End of block for SelectSaver

1;
__END__
# Local Variables:
# perl-indent-level: 4
# End:
